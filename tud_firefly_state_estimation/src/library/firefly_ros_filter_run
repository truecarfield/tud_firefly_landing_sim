
  if (printDiagnostics_)
  { // diagnostic_updater::DiagnosticTaskVektor::add(name, c, f) @name wrapper of diag msg, @c class instance the method is being called on; @f method to call to fill out the wrapper   by ZD
    diagnosticUpdater_.add("Filter diagnostic updater", this, &FireflyRosFilter<T>::aggregateDiagnostics); // @name is the task name @f is a function pointer whose variable is diagnostic_updater::diagnosticStatusWrapper  by ZD
  }

  // Set up the frequency diagnostic
  double minFrequency = frequency_ - 2;
  double maxFrequency = frequency_ + 2;
  diagnostic_updater::HeaderlessTopicDiagnostic freqDiag("odometry/filtered",
                                                         diagnosticUpdater_,
                                                         diagnostic_updater::FrequencyStatusParam(&minFrequency,
                                                                                                  &maxFrequency,
                                                                                                  0.1, 10));

  // We may need to broadcast a different transform than
  // the one we've already calculated.
  tf2::Transform mapOdomTrans;
  tf2::Transform odomBaseLinkTrans;
  geometry_msgs::TransformStamped mapOdomTransMsg;
  ros::Time curTime;
  ros::Time lastDiagTime = ros::Time::now();

  // Clear out the transforms
  worldBaseLinkTransMsg_.transform = tf2::toMsg(tf2::Transform::getIdentity());
  mapOdomTransMsg.transform = tf2::toMsg(tf2::Transform::getIdentity()); // now we pause here

  // Publisher
  ros::Publisher positionPub = nh_.advertise<nav_msgs::Odometry>("odometry/filtered", 20);
  tf2_ros::TransformBroadcaster worldTransformBroadcaster;

  // Optional acceleration publisher
  ros::Publisher accelPub;
  if (publishAcceleration_)
  {
    accelPub = nh_.advertise<geometry_msgs::AccelWithCovarianceStamped>("accel/filtered", 20);
  }

  // ros::Rate loop_rate(frequency_);

  while (ros::ok())
  {
    // The spin will call all the available callbacks and enqueue
    // their received measurements
    ros::spinOnce();

    if  (!updateQueue_.empty())
    {
      while (!updateQueue_.empty())
      {
        // curTime = ros::Time::now();
         curTime = currentTime_;

        // Now we'll integrate any measurements we've received
        integrateMeasurements(curTime);  // row 466 main function that include processMeasurement( the function that process the prediction and correction)  by ZD

        // Get latest state and publish it
        nav_msgs::Odometry filteredPosition;

        if (getFilteredOdometryMessage(filteredPosition))
        {
          worldBaseLinkTransMsg_.header.stamp = filteredPosition.header.stamp + tfTimeOffset_;
          worldBaseLinkTransMsg_.header.frame_id = filteredPosition.header.frame_id;
          worldBaseLinkTransMsg_.child_frame_id = filteredPosition.child_frame_id;

          worldBaseLinkTransMsg_.transform.translation.x = filteredPosition.pose.pose.position.x;
          worldBaseLinkTransMsg_.transform.translation.y = filteredPosition.pose.pose.position.y;
          worldBaseLinkTransMsg_.transform.translation.z = filteredPosition.pose.pose.position.z;
          worldBaseLinkTransMsg_.transform.rotation = filteredPosition.pose.pose.orientation;

          // If the worldFrameId_ is the odomFrameId_ frame, then we can just send the transform. If the
          // worldFrameId_ is the mapFrameId_ frame, we'll have some work to do.
          if (publishTransform_)
          {
            if (filteredPosition.header.frame_id == odomFrameId_)
            {
              worldTransformBroadcaster.sendTransform(worldBaseLinkTransMsg_);
            }
            else if (filteredPosition.header.frame_id == mapFrameId_)
            {
              try
              {
                tf2::Transform worldBaseLinkTrans;
                tf2::fromMsg(worldBaseLinkTransMsg_.transform, worldBaseLinkTrans);

                tf2::fromMsg(tfBuffer_.lookupTransform(baseLinkFrameId_, odomFrameId_, ros::Time(0)).transform,
                             odomBaseLinkTrans);

                /*
                 * First, see these two references:
                 * http://wiki.ros.org/tf/Overview/Using%20Published%20Transforms#lookupTransform
                 * http://wiki.ros.org/geometry/CoordinateFrameConventions#Transform_Direction
                 * We have a transform from mapFrameId_->baseLinkFrameId_, but it would actually transform
                 * a given pose from baseLinkFrameId_->mapFrameId_. We then used lookupTransform, whose
                 * first two arguments are target frame and source frame, to get a transform from
                 * baseLinkFrameId_->odomFrameId_. However, this transform would actually transform data
                 * from odomFrameId_->baseLinkFrameId_. Now imagine that we have a position in the
                 * mapFrameId_ frame. First, we multiply it by the inverse of the
                 * mapFrameId_->baseLinkFrameId, which will transform that data from mapFrameId_ to
                 * baseLinkFrameId_. Now we want to go from baseLinkFrameId_->odomFrameId_, but the
                 * transform we have takes data from odomFrameId_->baseLinkFrameId_, so we need its
                 * inverse as well. We have now transformed our data from mapFrameId_ to odomFrameId_.
                 * However, if we want other users to be able to do the same, we need to broadcast
                 * the inverse of that entire transform.
                */

                mapOdomTrans.mult(worldBaseLinkTrans, odomBaseLinkTrans);

                mapOdomTransMsg.transform = tf2::toMsg(mapOdomTrans);
                mapOdomTransMsg.header.stamp = filteredPosition.header.stamp + tfTimeOffset_;
                mapOdomTransMsg.header.frame_id = mapFrameId_;
                mapOdomTransMsg.child_frame_id = "Odometry/filtered";

                worldTransformBroadcaster.sendTransform(mapOdomTransMsg);
              }
              catch(...)
              {
                ROS_ERROR_STREAM("Could not obtain transform from " << odomFrameId_ << "->" << baseLinkFrameId_);
              }
            }
            else
            {
              ROS_ERROR_STREAM("Odometry message frame_id was " << filteredPosition.header.frame_id <<
                               ", expected " << mapFrameId_ << " or " << odomFrameId_);
            }
          }

          // Fire off the position and the transform
          positionPub.publish(filteredPosition);

          if (printDiagnostics_)
          {
            freqDiag.tick();
          }
        }

        // Publish the acceleration if desired and filter is initialized
        geometry_msgs::AccelWithCovarianceStamped filteredAcceleration;
        if (publishAcceleration_ && getFilteredAccelMessage(filteredAcceleration))
        {
          accelPub.publish(filteredAcceleration);
        }

        /* Diagnostics can behave strangely when playing back from bag
         * files and using simulated time, so we have to check for
         * time suddenly moving backwards as well as the standard
         * timeout criterion before publishing. */
        double diagDuration = (curTime - lastDiagTime).toSec();
        if (printDiagnostics_ && (diagDuration >= diagnosticUpdater_.getPeriod() || diagDuration < 0.0))
        {
          diagnosticUpdater_.force_update();
          lastDiagTime = curTime;
        }

        // Clear out expired history data
        if (smoothLaggedData_)
        {
          clearExpiredHistory(filter_.getLastMeasurementTime() - historyLength_);
        }

        updateQueue_.pop_front();
      }
    }
  }

